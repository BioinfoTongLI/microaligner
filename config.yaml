# Input
# List of input images, each having same number of channels, arranged in the same order.
# Simplest input format is a list of image paths:
# InputImagePaths:
#   - "img_path1"
#   - "img_path2"
#   - "img_path3"
# InputIsCycleStack: false
# InputIsStackBuilder: false

# If your input image is a stack that contains all the cycles
# write it in a format
# InputImagePaths:
#    - "stack_path"
# InputIsCycleStack: true
# InputIsStackBuilder: false

# If your input is not structured as a multichannel stack, you can use
# InputIsStackBuilder option. If file contains more than one page,
#  they will be treated as z-planes.
# InputImagePaths:
#    - Cycle 1:
#        DAPI: "img_path1"
#        Cy5: "img_path2"
#    - Cycle 2:
#        DAPI: "img_path3"
#        Cy5: "img_path4"
#  InputIsCycleStack: false
#  InputIsStackBuilder: true
Input:
  InputImagePaths:
    - "img_path1"
    - "img_path2"
    - "img_path3"
  InputIsCycleStack: false
  InputIsStackBuilder: false

# Output
# Images will be saved to directory with the following patterns
# If SaveOutputToCycleStack: true
# feature_reg_result_stack.tif and optflow_reg_result_stack.tif
# If SaveOutputToCycleStack: false
# feature_reg_result_cyc001.tif and optflow_reg_result_cyc001.tif
Output:
  OutputDir: "/path/to/out/registered_imgs"
  SaveOutputToCycleStack: true

# DataStructure
# ReferenceImage e.g. if your images are 1.tif 2.tif 3.tif,
# and you reference image is 1.tif, then ReferenceImage: 0
# Ids start from 0
# Alternatively if your images are in a stack ReferenceImage would mean
# which round of imaging in stack to use
# Images must have the same number of channels, arranged in the same order in each cycle,
# Such that reference channel e.g. DAPI, is in the same position in the cycle, e.g.
# Cycle1: DAPI, CD4, CD3, CD45
# Cycle2: DAPI, PanKeratin, Tubulin, Ki67
# Channel to use for alignment, has to be present in all rounds.
DataStructure:
  ReferenceImage: 0
  ReferenceChannel: "DAPI"

# Parameters for registration parts
# If you do not want to do optical flow or feature based registration
# then remove that part from the RegistrationParameters.
# RegistrationParameters:
# NumberPyramidLevels - number of levels in scale pyramid, min 1, default 3
# NumberIterationsPerLevel - number of registration iteration per pyramid level
# TileSize - tiles are used to speed up computation
# Overlap - overlap between adjacent tiles
# NumberOfWorkers - number of parallel tiles to work on at the same time,
#   default 0 - num parallel task as many as cores
# UseFullResImage - if true will use full resolution image as a part of pyramid base alignment
# It is more useful for the OptFlowReg as it gives more precise local alignment
# UseDOG - apply difference of Gaussian filters to the images before performing
#   registration. It may help for cases with uneven illumination. If you see
#   too much deformation after registration, you may want to turn it off for OptFlowReg.
RegistrationParameters:
  FeatureReg:
    NumberPyramidLevels: 3
    NumberIterationsPerLevel: 3
    TileSize: 1000
    Overlap: 100
    NumberOfWorkers: 0
    UseFullResImage: false
    UseDOG: true

  OptFlowReg:
    NumberPyramidLevels: 3
    NumberIterationsPerLevel: 3
    TileSize: 1000
    Overlap: 100
    NumberOfWorkers: 0
    UseFullResImage: true
    UseDOG: false
